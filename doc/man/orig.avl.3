.TH AVL 3 "28 March 1991"
.SH NAME
avl \- library for creating and manipulating AVL trees.
.SH SYNOPSIS
.nf
#include <avl.h>

AVL_TREE  avlinit( int(*icmp)(), unsigned(*isize)() );
void  avldispose( AVL_TREE *tree, void(*ifree)(), SIBLING_ORDER sib_ord );
void  avlfree( AVL_TREE tree )
void  avlwalk( AVL_TREE tree, void(*action)(), SIBLING_ORDER sib_ord );
int   avlcount( AVL_TREE tree );
void  *avlins( void *item, AVL_TREE tree );
void  *avldel( void *item, AVL_TREE tree );
void  *avlfind( void *item, AVL_TREE tree );
void  *avldelmin( AVL_TREE tree );
void  *avlfindmin( AVL_TREE tree );
void  *avldelmax( AVL_TREE tree );
void  *avlfindmax( AVL_TREE tree );
.fi

.SH DESCRIPTION
The functions above provide a library package for creating and manipulating
generic avl-trees.
.PP
.I Avlinit
takes an item compare function (which returns a \fIstrcmp\fP-type result),
and a size function (which returns the size of an item), and returns the
root of an empty AVL tree for the corresponding item-type.
.PP
.I Avldispose
will walk through a tree, applying the function \fIifree\fP (which should be
some type of item-deallocation function) to the item in each node, and then 
deallocates space for the given node. The parameter \fIorder\fP should be
one of \fILEFT_TO_RIGHT\fP or \fIRIGHT_TO_LEFT\fP.
of each node
.PP
.I Avlfree
is a macro which expands to
"\f4avldispose( &tree, free, LEFT_TO_RIGHT )\fP".
.PP
.I Avlwalk 
will traverse each item in the tree in the specified sibling order and apply
the function \fIaction\fP each time it encounters a node. Each non-empty
node will be encountered three times (corresponding to the three different
types of tree traversal: preorder, inorder, and postorder). The declaration
for \fIaction\fP should be the following:

.RS
.nf
.ft 4
void action( void  *dataptr, VISIT order, NODE  node, int   level, short bal );
.ft R
.fi

.I Dataptr
is the pointer to the data item contained in the current node.
.sp 8p
.I Order
will be one of
.I PREORDER,
.I INORDER,
or
.I POSTORDER
depending upon whether this is the first, second, or third time
(respectively) that the current node has been visited by \fIavlwalk\fP.
.sp 8p
.I Node
will be one of
.I IS_TREE,
.I IS_LBRANCH,
.I IS_RBRANCH,
.I IS_LEAF,
or
.I IS_NULL
depending upon whether the current node has two non-null children,
one non-null child in the left-subtree, one non-null child in the
right-subtree, two null children, or a null node (respectively).
.sp 8p
.I Level
will be the current depth of the tree (with the root being level zero)
that the current node corresponds to.
.sp 8p
.I Bal
will be the balance factor for the current node (which should range 
from -1 .. 1).
.RE

.PP
.I Avlcount
will return the number of items currently contained in the given AVL tree.
.PP
.I Avldel
will remove the node containing the given item from the given AVL tree and
will return a pointer to the data-item of the deleted node (or NULL if the
item was not found in the tree).
.PP
.I Avlins
will insert a node containing the given data item into the given AVL tree
and will return NULL (unless the item is already in the tree, in which case
the address of the located data item is returned).
.PP
.I Avlfind
will search for the node containing in the given tree which conatins the given
data item. If found the address of the data item is returned, otherwise NULL
is returned.
.PP
.I Avldelmin
will remove the "smallest" item (according the the compare function passed
to \fIavlinit\fP) from the given tree and return the address of the item
that was removed.
.PP
.I Avlfindmin
will return the address of the "smallest" data item in the tree.
.PP
.I Avldelmax
will remove the "largest" item (according the the compare function passed
to \fIavlinit\fP) from the given tree and return the address of the item
that was removed.
.PP
.I Avlfindmax
will return the address of the "largest" data item in the tree.

.SH AUTHOR
.nf
Brad Appleton	<brad@ssd.csd.Harris.COM>
Harris Computer Systems, Fort Lauderdale, FL USA
.fi
